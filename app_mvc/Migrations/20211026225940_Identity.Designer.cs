// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCommerce.Models.DataContext;

namespace eCommerce.Migrations
{
    [DbContext(typeof(eCommerceContext))]
    [Migration("20211026225940_Identity")]
    partial class Identity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_100_CI_AI")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("eCommerce.Models.Autenticacao.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("eCommerce.Models.Autenticacao.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Cidade", b =>
                {
                    b.Property<int>("IdCidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("IdUf")
                        .HasColumnType("smallint")
                        .HasColumnName("IdUF");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("IdCidade")
                        .HasName("PK__Cidade__160879A35C50D101");

                    b.HasIndex("IdUf");

                    b.ToTable("Cidade");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Cliente", b =>
                {
                    b.Property<int>("IdPessoa")
                        .HasColumnType("int");

                    b.Property<bool>("IsPreferencial")
                        .HasColumnType("bit");

                    b.HasKey("IdPessoa")
                        .HasName("PK__Cliente__7061465D4B0B807C");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Endereco", b =>
                {
                    b.Property<int>("IdEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Cep")
                        .HasColumnType("int")
                        .HasColumnName("CEP");

                    b.Property<int>("IdCidade")
                        .HasColumnType("int");

                    b.Property<int>("IdPessoa")
                        .HasColumnType("int");

                    b.Property<int>("IdTipo")
                        .HasColumnType("int")
                        .HasComment("Residencial ou Comercial");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("IdEndereco")
                        .HasName("PK__Endereco__0B7C7F17261E23E7");

                    b.HasIndex("IdCidade");

                    b.HasIndex("IdPessoa");

                    b.HasIndex("IdTipo");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Fornecedor", b =>
                {
                    b.Property<int>("IdPessoa")
                        .HasColumnType("int");

                    b.Property<short>("PrazoPrevistoEntrega")
                        .HasColumnType("smallint")
                        .HasComment("Prazo médio de entrega pelo fornecedor em dias\r\nCalculado a partir das compras feitas");

                    b.HasKey("IdPessoa")
                        .HasName("PK__Forneced__7061465DE71F5FAE");

                    b.ToTable("Fornecedor");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Funcionario", b =>
                {
                    b.Property<int>("IdPessoa")
                        .HasColumnType("int");

                    b.Property<string>("CarteiraTrabalho")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdPessoa")
                        .HasName("PK__Funciona__7061465DE535F0CB");

                    b.ToTable("Funcionario");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Loja", b =>
                {
                    b.Property<int>("IdPessoa")
                        .HasColumnType("int");

                    b.Property<int>("IdLojaMatriz")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoLoja")
                        .HasColumnType("int")
                        .HasComment("Matriz ou Filial");

                    b.HasKey("IdPessoa")
                        .HasName("PK__Loja__7061465DA3E63FAE");

                    b.HasIndex("IdLojaMatriz");

                    b.HasIndex("IdTipoLoja");

                    b.ToTable("Loja");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Movimento", b =>
                {
                    b.Property<int>("IdMovimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime");

                    b.Property<int>("IdPessoa")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoMovimento")
                        .HasColumnType("int");

                    b.HasKey("IdMovimento")
                        .HasName("PK__Moviment__9EBD6E4D04E8E227");

                    b.HasIndex("IdPessoa");

                    b.HasIndex("IdTipoMovimento");

                    b.ToTable("Movimento");
                });

            modelBuilder.Entity("eCommerce.Models.Table.MovimentoItem", b =>
                {
                    b.Property<int>("IdMovimento")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoLoja")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantidade")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("money");

                    b.HasKey("IdMovimento", "IdProdutoLoja")
                        .HasName("PK__Moviment__7B6685F2850D5DC6");

                    b.HasIndex("IdProdutoLoja");

                    b.ToTable("MovimentoItem");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Pessoa", b =>
                {
                    b.Property<int>("IdPessoa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CpfCnpj")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("IdPessoa")
                        .HasName("PK__Pessoa__7061465D49C7CF21");

                    b.HasIndex(new[] { "CpfCnpj" }, "UQ__Pessoa__0BCA032AA427C2C3")
                        .IsUnique();

                    b.ToTable("Pessoa");
                });

            modelBuilder.Entity("eCommerce.Models.Table.PessoaFisica", b =>
                {
                    b.Property<int>("IdPessoa")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("RG");

                    b.HasKey("IdPessoa")
                        .HasName("PK__PessoaFi__7061465D0AA9C6A4");

                    b.ToTable("PessoaFisica");
                });

            modelBuilder.Entity("eCommerce.Models.Table.PessoaJuridica", b =>
                {
                    b.Property<int>("IdPessoa")
                        .HasColumnType("int");

                    b.Property<string>("InscricaoEstadual")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("IdPessoa")
                        .HasName("PK__PessoaJu__7061465D232A187D");

                    b.ToTable("PessoaJuridica");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Produto", b =>
                {
                    b.Property<int>("IdProduto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("EstoqueMinimoSugerido")
                        .HasColumnType("smallint");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<int>("IdCor")
                        .HasColumnType("int");

                    b.Property<int>("IdMarca")
                        .HasColumnType("int");

                    b.Property<int>("IdTamanho")
                        .HasColumnType("int");

                    b.Property<int>("IdUnidade")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("money");

                    b.HasKey("IdProduto")
                        .HasName("PK__Produto__2E883C23C0F19D0D");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdCor");

                    b.HasIndex("IdMarca");

                    b.HasIndex("IdTamanho");

                    b.HasIndex("IdUnidade");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("eCommerce.Models.Table.ProdutoLoja", b =>
                {
                    b.Property<int>("IdProdutoLoja")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("EstoqueMinimo")
                        .HasColumnType("smallint");

                    b.Property<int>("IdPessoa")
                        .HasColumnType("int");

                    b.Property<int>("IdProduto")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoLoja")
                        .HasName("PK__ProdutoL__5DBEBBFF7D42DEAD");

                    b.HasIndex("IdPessoa");

                    b.HasIndex("IdProduto");

                    b.ToTable("ProdutoLoja");
                });

            modelBuilder.Entity("eCommerce.Models.Table.TabelaDescritiva", b =>
                {
                    b.Property<int>("IdTabelaDescritiva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("IdTabelaDescritiva")
                        .HasName("PK__TabelaDe__5C5135773EEC0060");

                    b.ToTable("TabelaDescritiva");
                });

            modelBuilder.Entity("eCommerce.Models.Table.TabelaDescritivaConteudo", b =>
                {
                    b.Property<int>("IdTabelaDescritivaConteudo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("IdTabelaDescritiva")
                        .HasColumnType("int");

                    b.HasKey("IdTabelaDescritivaConteudo")
                        .HasName("PK__TabelaDe__839A5D7F263BD181");

                    b.HasIndex("IdTabelaDescritiva");

                    b.ToTable("TabelaDescritivaConteudo");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Telefone", b =>
                {
                    b.Property<int>("IdTelefone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPessoa")
                        .HasColumnType("int");

                    b.Property<int>("IdTipo")
                        .HasColumnType("int")
                        .HasComment("Comercial\r\nResidencial\r\nPessoal");

                    b.Property<long>("Numero")
                        .HasColumnType("bigint");

                    b.HasKey("IdTelefone")
                        .HasName("PK__Telefone__9B8AC7A915EE557C");

                    b.HasIndex("IdPessoa");

                    b.HasIndex("IdTipo");

                    b.ToTable("Telefone");
                });

            modelBuilder.Entity("eCommerce.Models.Table.TipoMovimento", b =>
                {
                    b.Property<int>("IdTipoMovimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Cliente")
                        .HasColumnType("bit")
                        .HasComment("Busca dados de clientes ao realizar a operação, caso seja verdadeiro (1).\r\nCaso contrário (0), busca dados de fornecedores");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasComment("Compra, venda, orçamento");

                    b.Property<short>("OperacaoEstoque")
                        .HasColumnType("smallint")
                        .HasComment("-1: diminuir estoque (movimento de Venda para cliente)\r\n0: não afetar estoque (orçamento)\r\n1: aumenta estoque (movimento de Compra - fornecedor)");

                    b.HasKey("IdTipoMovimento")
                        .HasName("PK__TipoMovi__A9321B46715BAB59");

                    b.ToTable("TipoMovimento");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Uf", b =>
                {
                    b.Property<short>("IdUf")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("IdUF")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength(true);

                    b.HasKey("IdUf")
                        .HasName("PK__UF__B770025B9D18DDA3");

                    b.ToTable("UF");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("eCommerce.Models.Autenticacao.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("eCommerce.Models.Autenticacao.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("eCommerce.Models.Autenticacao.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("eCommerce.Models.Autenticacao.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Autenticacao.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("eCommerce.Models.Autenticacao.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Models.Table.Cidade", b =>
                {
                    b.HasOne("eCommerce.Models.Table.Uf", "IdUfNavigation")
                        .WithMany("Cidades")
                        .HasForeignKey("IdUf")
                        .HasConstraintName("FK_UF_Cidade")
                        .IsRequired();

                    b.Navigation("IdUfNavigation");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Cliente", b =>
                {
                    b.HasOne("eCommerce.Models.Table.Pessoa", "IdPessoaNavigation")
                        .WithOne("Cliente")
                        .HasForeignKey("eCommerce.Models.Table.Cliente", "IdPessoa")
                        .HasConstraintName("FK_Pessoa_Cliente")
                        .IsRequired();

                    b.Navigation("IdPessoaNavigation");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Endereco", b =>
                {
                    b.HasOne("eCommerce.Models.Table.Cidade", "IdCidadeNavigation")
                        .WithMany("Enderecos")
                        .HasForeignKey("IdCidade")
                        .HasConstraintName("Fk_Cidade_Endereco")
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Table.Pessoa", "IdPessoaNavigation")
                        .WithMany("Enderecos")
                        .HasForeignKey("IdPessoa")
                        .HasConstraintName("FK_Pessoa_Endereco")
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Table.TabelaDescritivaConteudo", "IdTipoNavigation")
                        .WithMany("Enderecos")
                        .HasForeignKey("IdTipo")
                        .HasConstraintName("FK_TipoEndereco_Endereco")
                        .IsRequired();

                    b.Navigation("IdCidadeNavigation");

                    b.Navigation("IdPessoaNavigation");

                    b.Navigation("IdTipoNavigation");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Fornecedor", b =>
                {
                    b.HasOne("eCommerce.Models.Table.Pessoa", "IdPessoaNavigation")
                        .WithOne("Fornecedor")
                        .HasForeignKey("eCommerce.Models.Table.Fornecedor", "IdPessoa")
                        .HasConstraintName("FK_Pessoa_Fornecedor")
                        .IsRequired();

                    b.Navigation("IdPessoaNavigation");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Funcionario", b =>
                {
                    b.HasOne("eCommerce.Models.Table.Pessoa", "IdPessoaNavigation")
                        .WithOne("Funcionario")
                        .HasForeignKey("eCommerce.Models.Table.Funcionario", "IdPessoa")
                        .HasConstraintName("FK_Pessoa_Funcionario")
                        .IsRequired();

                    b.Navigation("IdPessoaNavigation");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Loja", b =>
                {
                    b.HasOne("eCommerce.Models.Table.Loja", "IdLojaMatrizNavigation")
                        .WithMany("InverseIdLojaMatrizNavigation")
                        .HasForeignKey("IdLojaMatriz")
                        .HasConstraintName("FK_Matriz_Filial")
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Table.Pessoa", "IdPessoaNavigation")
                        .WithOne("Loja")
                        .HasForeignKey("eCommerce.Models.Table.Loja", "IdPessoa")
                        .HasConstraintName("FK_Pessoa_Loja")
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Table.TabelaDescritivaConteudo", "IdTipoLojaNavigation")
                        .WithMany("Lojas")
                        .HasForeignKey("IdTipoLoja")
                        .HasConstraintName("FK_TipoLoja_Loja")
                        .IsRequired();

                    b.Navigation("IdLojaMatrizNavigation");

                    b.Navigation("IdPessoaNavigation");

                    b.Navigation("IdTipoLojaNavigation");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Movimento", b =>
                {
                    b.HasOne("eCommerce.Models.Table.Pessoa", "IdPessoaNavigation")
                        .WithMany("Movimentos")
                        .HasForeignKey("IdPessoa")
                        .HasConstraintName("FK_Pessoa_Movimento")
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Table.TipoMovimento", "IdTipoMovimentoNavigation")
                        .WithMany("Movimentos")
                        .HasForeignKey("IdTipoMovimento")
                        .HasConstraintName("FK_TipoMovimento_Movimento")
                        .IsRequired();

                    b.Navigation("IdPessoaNavigation");

                    b.Navigation("IdTipoMovimentoNavigation");
                });

            modelBuilder.Entity("eCommerce.Models.Table.MovimentoItem", b =>
                {
                    b.HasOne("eCommerce.Models.Table.Movimento", "IdMovimentoNavigation")
                        .WithMany("MovimentoItems")
                        .HasForeignKey("IdMovimento")
                        .HasConstraintName("FK_Movimento_MovimentoItem")
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Table.ProdutoLoja", "IdProdutoLojaNavigation")
                        .WithMany("MovimentoItems")
                        .HasForeignKey("IdProdutoLoja")
                        .HasConstraintName("FK_ProdutoLoja_MovimentoItem")
                        .IsRequired();

                    b.Navigation("IdMovimentoNavigation");

                    b.Navigation("IdProdutoLojaNavigation");
                });

            modelBuilder.Entity("eCommerce.Models.Table.PessoaFisica", b =>
                {
                    b.HasOne("eCommerce.Models.Table.Pessoa", "IdPessoaNavigation")
                        .WithOne("PessoaFisica")
                        .HasForeignKey("eCommerce.Models.Table.PessoaFisica", "IdPessoa")
                        .HasConstraintName("FK_Pessoa_PessoaFisica")
                        .IsRequired();

                    b.Navigation("IdPessoaNavigation");
                });

            modelBuilder.Entity("eCommerce.Models.Table.PessoaJuridica", b =>
                {
                    b.HasOne("eCommerce.Models.Table.Pessoa", "IdPessoaNavigation")
                        .WithOne("PessoaJuridica")
                        .HasForeignKey("eCommerce.Models.Table.PessoaJuridica", "IdPessoa")
                        .HasConstraintName("FK_Pessoa_PessoaJuridica")
                        .IsRequired();

                    b.Navigation("IdPessoaNavigation");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Produto", b =>
                {
                    b.HasOne("eCommerce.Models.Table.TabelaDescritivaConteudo", "IdCategoriaNavigation")
                        .WithMany("ProdutoIdCategoriaNavigations")
                        .HasForeignKey("IdCategoria")
                        .HasConstraintName("FK_Categoria_Produto")
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Table.TabelaDescritivaConteudo", "IdCorNavigation")
                        .WithMany("ProdutoIdCorNavigations")
                        .HasForeignKey("IdCor")
                        .HasConstraintName("FK_Cor_Produto")
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Table.TabelaDescritivaConteudo", "IdMarcaNavigation")
                        .WithMany("ProdutoIdMarcaNavigations")
                        .HasForeignKey("IdMarca")
                        .HasConstraintName("FK_Marca_Produto")
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Table.TabelaDescritivaConteudo", "IdTamanhoNavigation")
                        .WithMany("ProdutoIdTamanhoNavigations")
                        .HasForeignKey("IdTamanho")
                        .HasConstraintName("FK_Tamanho_Produto")
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Table.TabelaDescritivaConteudo", "IdUnidadeNavigation")
                        .WithMany("ProdutoIdUnidadeNavigations")
                        .HasForeignKey("IdUnidade")
                        .HasConstraintName("FK_Unidade_Produto")
                        .IsRequired();

                    b.Navigation("IdCategoriaNavigation");

                    b.Navigation("IdCorNavigation");

                    b.Navigation("IdMarcaNavigation");

                    b.Navigation("IdTamanhoNavigation");

                    b.Navigation("IdUnidadeNavigation");
                });

            modelBuilder.Entity("eCommerce.Models.Table.ProdutoLoja", b =>
                {
                    b.HasOne("eCommerce.Models.Table.Loja", "IdPessoaNavigation")
                        .WithMany("ProdutoLojas")
                        .HasForeignKey("IdPessoa")
                        .HasConstraintName("FK_Loja_Produto")
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Table.Produto", "IdProdutoNavigation")
                        .WithMany("ProdutoLojas")
                        .HasForeignKey("IdProduto")
                        .HasConstraintName("FK_Produto_Loja")
                        .IsRequired();

                    b.Navigation("IdPessoaNavigation");

                    b.Navigation("IdProdutoNavigation");
                });

            modelBuilder.Entity("eCommerce.Models.Table.TabelaDescritivaConteudo", b =>
                {
                    b.HasOne("eCommerce.Models.Table.TabelaDescritiva", "IdTabelaDescritivaNavigation")
                        .WithMany("TabelaDescritivaConteudos")
                        .HasForeignKey("IdTabelaDescritiva")
                        .HasConstraintName("FK_TabelaDescritiva_TabelaDescritivaConteudo")
                        .IsRequired();

                    b.Navigation("IdTabelaDescritivaNavigation");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Telefone", b =>
                {
                    b.HasOne("eCommerce.Models.Table.Pessoa", "IdPessoaNavigation")
                        .WithMany("Telefones")
                        .HasForeignKey("IdPessoa")
                        .HasConstraintName("FK_Pessoa_Telefone")
                        .IsRequired();

                    b.HasOne("eCommerce.Models.Table.TabelaDescritivaConteudo", "IdTipoNavigation")
                        .WithMany("Telefones")
                        .HasForeignKey("IdTipo")
                        .HasConstraintName("FKTelefone206041")
                        .IsRequired();

                    b.Navigation("IdPessoaNavigation");

                    b.Navigation("IdTipoNavigation");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Cidade", b =>
                {
                    b.Navigation("Enderecos");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Loja", b =>
                {
                    b.Navigation("InverseIdLojaMatrizNavigation");

                    b.Navigation("ProdutoLojas");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Movimento", b =>
                {
                    b.Navigation("MovimentoItems");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Pessoa", b =>
                {
                    b.Navigation("Cliente");

                    b.Navigation("Enderecos");

                    b.Navigation("Fornecedor");

                    b.Navigation("Funcionario");

                    b.Navigation("Loja");

                    b.Navigation("Movimentos");

                    b.Navigation("PessoaFisica");

                    b.Navigation("PessoaJuridica");

                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Produto", b =>
                {
                    b.Navigation("ProdutoLojas");
                });

            modelBuilder.Entity("eCommerce.Models.Table.ProdutoLoja", b =>
                {
                    b.Navigation("MovimentoItems");
                });

            modelBuilder.Entity("eCommerce.Models.Table.TabelaDescritiva", b =>
                {
                    b.Navigation("TabelaDescritivaConteudos");
                });

            modelBuilder.Entity("eCommerce.Models.Table.TabelaDescritivaConteudo", b =>
                {
                    b.Navigation("Enderecos");

                    b.Navigation("Lojas");

                    b.Navigation("ProdutoIdCategoriaNavigations");

                    b.Navigation("ProdutoIdCorNavigations");

                    b.Navigation("ProdutoIdMarcaNavigations");

                    b.Navigation("ProdutoIdTamanhoNavigations");

                    b.Navigation("ProdutoIdUnidadeNavigations");

                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("eCommerce.Models.Table.TipoMovimento", b =>
                {
                    b.Navigation("Movimentos");
                });

            modelBuilder.Entity("eCommerce.Models.Table.Uf", b =>
                {
                    b.Navigation("Cidades");
                });
#pragma warning restore 612, 618
        }
    }
}
